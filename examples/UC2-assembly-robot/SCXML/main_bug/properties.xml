<?xml version="1.1" encoding="UTF-8" ?>
<properties>
  <ports>
    <!--<scxml_event_send event="bt_1000_response" origin="1000_RetryUntilSuccessful" target="bt_root_fsm_Policy0">
      <state_var id="tick" param="status" type="int32" expr="0"/>
    </scxml_event_send>-->
    <scxml_event_send event="topic_uc2__info__properties__move_block_abort_time_msg" origin="MoveToSkill" target="NONE">
      <event_var id="abort_move_to_skill"/>
      <state_var id="abort_time_move_to_skill" param="ros_fields__sec" type="int32" expr="0"/>
    </scxml_event_send>
    <!--<scxml_event_send event="topic_uc2__info__properties__move_block_abort_time_msg" origin="CloseGripperSkill" target="NONE">
      <event_var id="abort_close_gripper_skill"/>
      <state_var id="abort_time_close_gripper_skill" param="ros_fields__sec" type="int32" expr="0"/>
    </scxml_event_send>
    <scxml_event_send event="topic_uc2__info__properties__move_block_abort_time_msg" origin="OpenGripperSkill" target="NONE">
      <event_var id="abort_open_gripper_skill"/>
      <state_var id="abort_time_open_gripper_skill" param="ros_fields__sec" type="int32" expr="0"/>
    </scxml_event_send>-->
    <scxml_event_send event="topic_clock_msg" origin="autogenerated_global_timer" target="MoveToSkill">
      <state_var id="time" param="ros_fields__sec" type="int32" expr="0"/>
    </scxml_event_send>
    <scxml_event_send event="bt_1010_response" origin="1010_RecoverBlock" target="1007_Fallback">
      <event_var id="move_block"/>
      <state_var id="move_code" param="status" type="int32" expr="0"/>
    </scxml_event_send>
  </ports>

  <guarantees>
    <property id="executes_recovery_branch_or_success1" expr="H ( (not (P { abort_move_to_skill })) or { time &lt; abort_time_move_to_skill + 20 } or (P { move_code == 1 }))"/>
    <!--<property id="executes_recovery_branch_or_success2" expr="H ( (not (P { abort_close_gripper_skill })) or { time &lt; abort_time_close_gripper_skill + 20 } or (P { move_code == 4 }))"/>
    <property id="executes_recovery_branch_or_success3" expr="H ( (not (P { abort_open_gripper_skill })) or { time &lt; abort_time_open_gripper_skill + 20 } or (P { move_code == 4 }))"/>-->
    <!--<property id="move_success" expr="P { tick == 1 }"/>-->
    <!-- NOTE: messages move_block and move_code don't arrive at the same time, but they still arrive in the same time step -->
    <!-- NOTE: this could be supported via an event_var + param port -->
    <!--<property id="move_action_success" expr="P ( (P[0:0] { move_block }) and { move_code == 4 } )"/>-->
  </guarantees>
</properties>
