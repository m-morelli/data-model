<?xml version="1.0" encoding="UTF-8"?>
<ascxml
    initial="idle"
    version="1.0"
    name="ComputeBestPlacePose"
    model_src=""
    xmlns="http://www.w3.org/2005/07/scxml">

    <!-- Ports -->
    <bt_declare_port_in   key="block_id"            type="int32" />
    <bt_declare_port_in   key="place_approach_dist" type="int32" />
    <bt_declare_port_in   key="place_retreat_dist"  type="int32" />
    <bt_declare_port_out  key="pre_place_pose"      type="int32" />
    <bt_declare_port_out  key="place_pose"          type="int32" />
    <bt_declare_port_out  key="post_place_pose"     type="int32" />

    <!-- ComputeBestPlacePose is a client for the ComputeBestPlacePoseSkill -->
    <ros_action_client name="ComputeBestPlacePose_action" action_name="/uc2/skills/compute_best_place_pose" type="convince_uc2_interfaces/ComputeBestPlacePose" />

    <datamodel>
        <data id="block_id"         expr="0" type="int32" />
        <!-- This skill provides identifiers of computed place poses as result -->
        <data id="pre_place_pose"   expr="0" type="int32" />
        <data id="place_pose"       expr="0" type="int32" />
        <data id="post_place_pose"  expr="0" type="int32" />
        <!-- Skill's success/failure -->
        <data id="skillResponse" expr="false" type="bool" />
    </datamodel>

    <state id="idle">
        <!-- If ticked, start the ComputeBestPlacePoseSkill -->
        <bt_tick target="startSkill" >
          <!-- 20/06/2025. Read blackboard variables now, to prevent :
            "AssertionError: Error: SCXML state startSkill: reading blackboard variables from
             onentry. This isn't yet supported." -->
            <assign location="block_id">
                <expr>
                    <bt_get_input key="block_id" />
                </expr>
            </assign>
        </bt_tick>
        <bt_halt target="idle">
            <bt_return_halted />
        </bt_halt>
        <!-- Just handle possible responses in case of halting -->
        <ros_action_handle_goal_response name="ComputeBestPlacePose_action" accept="idle" reject="idle" />
        <ros_action_handle_success_result name="ComputeBestPlacePose_action" target="idle" />
        <ros_action_handle_aborted_result name="ComputeBestPlacePose_action" target="idle" />
    </state>

    <state id="startSkill">
        <!-- Send an asynchronous request and answer RUNNING to the BT -->
        <onentry>
            <ros_action_send_goal name="ComputeBestPlacePose_action">
                <field name="block_id" expr="block_id" />
                <field name="approach_distance">
                  <expr>
                    <bt_get_input key="place_approach_dist" />
                  </expr>
                </field>
                <field name="retreat_distance">
                  <expr>
                    <bt_get_input key="place_retreat_dist" />
                  </expr>
                </field>
            </ros_action_send_goal>
        </onentry>
        <transition target="waitAccept" />
    </state>

    <state id="waitAccept">
        <onentry>
            <bt_return_status status="RUNNING" />
        </onentry>
        <bt_tick target="waitAccept" />
        <bt_halt target="idle">
            <bt_return_halted />
        </bt_halt>
        <ros_action_handle_goal_response name="ComputeBestPlacePose_action" accept="running" reject="idle" />
    </state>

    <state id="running">
        <!-- If the ComputeBestPlacePose_action returns, go to answer state-->
        <ros_action_handle_success_result name="ComputeBestPlacePose_action" target="answer">
            <assign location="pre_place_pose"  expr="_wrapped_result.result.pre_place_pose" />
            <assign location="place_pose"      expr="_wrapped_result.result.place_pose" />
            <assign location="post_place_pose" expr="_wrapped_result.result.post_place_pose" />
            <assign location="skillResponse"   expr="true" />
        </ros_action_handle_success_result>
        <!-- TODO
        <ros_action_handle_canceled_result name="ComputeBestPlacePose_action" target="answer">
            <assign location="skillResponse" expr="false" /> (???)
        </ros_action_handle_canceled_result>
        -->
        <ros_action_handle_aborted_result name="ComputeBestPlacePose_action" target="answer">
            <assign location="skillResponse" expr="false" />
        </ros_action_handle_aborted_result>

        <!-- If ticked, just answer RUNNING and stay in this state -->
        <bt_tick target="running">
            <bt_return_status status="RUNNING" />
        </bt_tick>
        <!-- If halted, send stop request to skill and go to idle state -->
        <bt_halt target="idle">
            <!-- This should be in charge of requesting the action cancellation -->
            <bt_return_halted />
        </bt_halt>
    </state>

    <state id="answer">
        <!-- If halted, return to the idle state -->
        <bt_halt target="idle">
            <bt_return_halted />
        </bt_halt>
        <!-- If ticked, send back an answer to the BT and go to idle state -->
        <bt_tick target="idle">
            <if cond="skillResponse == true">
                <bt_set_output key="pre_place_pose"   expr="pre_place_pose" />
                <bt_set_output key="place_pose"       expr="place_pose" />
                <bt_set_output key="post_place_pose"  expr="post_place_pose" />
                <bt_return_status status="SUCCESS" />
                <else />
                <bt_return_status status="FAILURE" />
            </if>
        </bt_tick>
    </state>
</ascxml>
